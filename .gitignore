.DS_Store
/.build
/Packages

# Generated documentation
docs
/requirements.csv
/requirements.html
/requirements.md.html
/requirements_filtered.html
doc/errors/generated

# Environment variables provided by other sources
development.env 
development.apikeys.env
development.static.env
# Symbolic links to the above files are created during project setup
Sources/eRpApp/development.env.default
Sources/eRpApp/development.env
Sources/eRpApp/development.apikeys.env
Sources/eRpApp/development.static.env


# AppCode project files
.idea/

# Third party files
vendor/
.vscode

# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## Build generated
build/
DerivedData/
*.xcodeproj/*
!*.xcodeproj/project.xcworkspace
*.xcodeproj/project.xcworkspace/*
!*.xcodeproj/project.xcworkspace/xcshareddata
*.xcodeproj/project.xcworkspace/xcshareddata/*
!*.xcodeproj/project.xcworkspace/xcshareddata/swiftpm
*.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/*
!*.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved

## Various settings
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata/

## Other
*.moved-aside
*.xccheckout
*.xcscmblueprint

## Obj-C/Swift specific
*.hmap
*.ipa
*.dSYM.zip
*.dSYM

## Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
# Package.pins
# Package.resolved
.build/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/
#
# Add this line if you want to avoid checking in source code from the Xcode workspace
# *.xcworkspace

# Brew
Brewfile.lock.json

# fastlane
#
# It is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the
# screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/#source-control

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output
fastlane/README.md
fastlane/settings.xctestrun
artifacts/
distribution/

# Code Injection
#
# After new code Injection tools there's a generated folder /iOSInjectionProject
# https://github.com/johnno1962/injectionforxcode

iOSInjectionProject/

# R.swift generated
#*.generated.swift

# own
.urls

# Looks unsuspicious, only the script github_publish_prepare has to go (and is no longer needed)
devops
# Can we open source our Match certificate repo?
fastlane/Matchfile
# Looks outdated ~ 3 years old
doc/security_review
# No concerns here (but nothing official as well). Archive/ Remove when migrating
doc/architecture

# Solution needed for private key part
Tests/IntegrationTests/Resources/Certificates.bundle
# Solution needed for private key part 
Tests/IDPTests/Resources/Certificates.bundle
# Has a reference to BSI-eRp-ePA": "https://path-to-gematik-gitlab/api/v4/projects/833/repository/files/security_review%2Frequirements%2F2024.html/raw?ref=main
fastlane/audit_afos.json

# will go away with public fastlane plugin
Gemfile.internal
Gemfile.internal.lock
fastlane/Pluginfile.internal
.bundle
# will go away automatically
jenkinsfiles

# Should be no problem(?)
Templates/Sourcery/Generic/errors.stencil
