// swiftlint:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

{% if tables.count > 0 %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
import SwiftUI

// swiftlint:disable superfluous_disable_command file_length implicit_return

// MARK: - Strings

{% macro parametersBlock types %}{% filter removeNewlines:"leading" %}
    {% for type in types %}
      {% if type == "String" %}
      _ element{{forloop.counter}}: String
      {% else %}
      _ element{{forloop.counter}}: {{type}}
      {% endif %}
      {{ ", " if not forloop.last }}
    {% endfor %}
  {% endfilter %}{% endmacro %}
  {% macro argumentsBlock types %}{% filter removeNewlines:"leading" %}
    {% for type in types %}
      {% if type == "String" %}
      element{{forloop.counter}}
      {% elif type == "UnsafeRawPointer" %}
      Int(bitPattern: p{{forloop.counter}})
      {% else %}
      element{{forloop.counter}}
      {% endif %}
      {{ ", " if not forloop.last }}
    {% endfor %}
  {% endfilter %}{% endmacro %}
  {% macro recursiveBlock table item %}
    {% for string in item.strings %}
    {% if not param.noComments %}
    {% for line in string.translation|split:"\n" %}
    /// {{line}}
    {% endfor %}
    {% endif %}
    {% if string.types %}
    {{accessModifier}} static func {{string.key|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}({% call parametersBlock string.types %}) -> StringAsset {
        StringAsset("{{string.key}}", arguments: [{% call argumentsBlock string.types %}])
    }
    {% elif param.lookupFunction %}
    {# custom localization function is mostly used for in-app lang selection, so we want the loc to be recomputed at each call for those (hence the computed var) #}
    {{accessModifier}} static var {{string.key|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}: StringAsset { return StringAsset("{{string.key}}") }
    {% else %}
    {{accessModifier}} static let {{string.key|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = StringAsset("{{string.key}}")
    {% endif %}
    {% endfor %}
    {% for child in item.children %}
    {% call recursiveBlock table child %}
    {% endfor %}
  {% endmacro %}
  // swiftlint:disable function_parameter_count identifier_name line_length type_body_length
  {% set enumName %}{{param.enumName|default:"L10n"}}{% endset %}
  {{accessModifier}} enum {{enumName}} {
    {% if tables.count > 1 or param.forceFileNameEnum %}
    {% for table in tables %}
    {% call recursiveBlock table.name table.levels %}
    {% endfor %}
    {% else %}
    {% call recursiveBlock tables.first.name tables.first.levels %}
    {% endif %}
  }
    
  internal extension StringAsset {
    init(_ string: String, arguments: [CVarArg]? = nil) {
        self.init(string, arguments: arguments, bundle: Bundle.module)
    }
  }
  // swiftlint:enable function_parameter_count identifier_name line_length type_body_length
  {% else %}
  // No string found
  {% endif %}
