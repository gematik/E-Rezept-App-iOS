// sourcery:file:eRpApp/Generated/Stores+DestinationsScope

{% macro storeDestinationsScopeExtension domain destinationVariable %}
{% typed domain as Type %}
{% typed destinationVariable as Variable %}
extension Store where State == {{ domain.name }}.State, Action == {{ domain.name }}.Action {
    func destinationsScope<ChildState, ChildAction>(
        state: CasePath<{{ domain.name }}.Destinations.State?, ChildState>,
        action: @escaping (ChildAction) -> {{ domain.name }}.Destinations.Action
    ) -> Store<ChildState?, ChildAction> {
        self.scope(state: \{{ domain.name }}.State.destination, action: {{ domain.name }}.Action.destination)
            .scope(
                state: state.extract(from:),
                action: action
            )
    }

    func destinationsScope<ChildState>(
        state: CasePath<{{ domain.name }}.Destinations.State?, ChildState>
    ) -> Store<ChildState?, Action> {
        self.scope(state: \{{ domain.name }}.State.destination)
            .scope(state: state.extract(from:))
    }
}
{% endmacro %}

import ComposableArchitecture
import Foundation

{% for domain in types.based.ReducerProtocol %}

{% for stateType in domain.containedTypes where stateType.localName == "State" %}
{% for destinationVariable in stateType.allVariables where destinationVariable.name == "destination" %}

{% for actionEnum in domain.containedTypes|enum where actionEnum.localName == "Action"  %}
{% typed actionEnum as Enum %}
{% for actionEnumMember in actionEnum.cases where actionEnumMember.name == "destination" %}

{% call storeDestinationsScopeExtension domain destinationVariable %}

{% endfor %}
{% endfor %}

{% endfor %}
{% endfor %}

{% endfor %}

// sourcery:end