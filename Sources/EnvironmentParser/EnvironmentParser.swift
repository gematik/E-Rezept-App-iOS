//
//  Copyright (c) 2024 gematik GmbH
//
//  Licensed under the EUPL, Version 1.2 or â€“ as soon they will be approved by
//  the European Commission - subsequent versions of the EUPL (the Licence);
//  You may not use this work except in compliance with the Licence.
//  You may obtain a copy of the Licence at:
//
//      https://joinup.ec.europa.eu/software/page/eupl
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the Licence is distributed on an "AS IS" basis,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the Licence for the specific language governing permissions and
//  limitations under the Licence.
//
//

import Foundation

@main
@available(macOS 13.0.0, *)
enum EnvironmentParser {
    static func main() async throws {
        guard CommandLine.arguments.count == 6 else {
            throw EnvironmentParserError.invalidArguments
        }
        let developmentEnv, developmentApiKeysEnv, developmentStaticEnv, developmentEnvDefault, output: URL

        // arguments[0] is the path to this command line tool
        developmentEnv = URL(filePath: CommandLine.arguments[1]) // file development.env
        developmentApiKeysEnv = URL(filePath: CommandLine.arguments[2]) // file development.apikeys.env
        developmentStaticEnv = URL(filePath: CommandLine.arguments[3]) // file development.static.env
        developmentEnvDefault = URL(filePath: CommandLine.arguments[4]) // file development.env.default
        output = URL(filePath: CommandLine.arguments[5])

        guard FileManager.default.fileExists(atPath: developmentEnvDefault.path) else {
            throw EnvironmentParserError.developmentEnvDefaultFileNotFound
        }

        // Gather all the necessary keys for project compilation.
        // Also check whether all values are empty in development.env.default.
        let developmentEnvDefaultConfig = try ConfigParser(filePath: developmentEnvDefault.path).config

        guard developmentEnvDefaultConfig.values.allSatisfy(\.isEmpty)
        else {
            throw EnvironmentParserError.developmentEnvDefaultValueMustBeEmpty
        }

        // Read the development.apikeys.env file to gather the version dependent API key values.
        let developmentApiKeysConfig = (try? ConfigParser(filePath: developmentApiKeysEnv.path))?.config ?? [:]

        // Read the development.static.env file to gather the version dependent API key values.
        let developmentStaticConfig = (try? ConfigParser(filePath: developmentStaticEnv.path))?.config ?? [:]

        // Read the development.env file to gather the actual values.
        let developmentEnvConfig = (try? ConfigParser(filePath: developmentEnv.path))?.config ?? [:]

        // Merge all found configurations,
        // with the values from development.apikeys.env and development.static.env taking precedence over those in
        //   development.env.default, and
        // with the values from development.env taking precedence over those in
        //   development.apikeys.env and
        //   development.static.env
        // and preserve the empty key-value pairs from development.env.default otherwise.
        let mergedKeyValues = developmentEnvDefaultConfig
            .merging(developmentApiKeysConfig) { $1 }
            .merging(developmentStaticConfig) { $1 }
            .merging(developmentEnvConfig) { $1 }

        let puApiKeyEmptyWarning =
            "#warning(\"This *_PU_X_API_KEY value is empty. Utilise file development.env to provide a value for proper usage of the app.\")" // swiftlint:disable:this line_length

        let code = """
        // This file is generated by the ErpAppPlugin in conjunction with the EnvironmentParser tool.
        // Do not edit.

        extension AppConfiguration.Environment {
        \t\(mergedKeyValues.map {
            var returnString = ""

            if $0.key.contains("PU_X_API_KEY"), $0.value.isEmpty {
                returnString += "\(puApiKeyEmptyWarning)\n\t"
            }
            returnString += "static let \($0.key): String = \"\($0.value)\""

            return returnString
        }
        .joined(separator: "\n\t"))
        }
        """

        guard let data = code.data(using: .utf8) else {
            throw EnvironmentParserError.invalidData
        }
        try data.write(to: output, options: .atomic)
    }
}

struct ConfigParser {
    var config: [String: String] = [:]

    init(filePath: String) throws {
        let content = try String(contentsOfFile: filePath, encoding: .utf8)
        parse(content)
    }

    private mutating func parse(_ content: String) {
        let lines = content.split(separator: "\n")
        for line in lines {
            if let (key, value) = parseLine(String(line)) {
                config[key] = value
            }
        }
    }

    private func parseLine(_ line: String) -> (String, String)? {
        // Comment or empty line
        if
            line.starts(with: "#") ||
            line.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines).isEmpty
        {
            return nil
        }

        let components = line.split(separator: "=", maxSplits: 1, omittingEmptySubsequences: true)
        guard components.count == 2 else { return nil }
        let key = components[0].trimmingCharacters(in: .whitespacesAndNewlines)
        let value = components[1].trimmingCharacters(in: .whitespacesAndNewlines)
            .replacingOccurrences(of: "\"", with: "")
        return (key, value)
    }
}

enum EnvironmentParserError: Error {
    case invalidArguments
    case invalidData
    case developmentEnvDefaultFileNotFound
    case developmentEnvDefaultValueMustBeEmpty
}
